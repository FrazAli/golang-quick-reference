@document.meta
title: Go Programming Language
description: A quick reference for Go programming language.
authors: Fraz Ali <frazaliqureshi@gmail.com>
categories:
created: 2022-03-22
version: 0.0.11
@end

= TOC

* Introduction
  Go is a compiled language.
  You can send the executables to other persons and they can execute it without the need to have Go installed.

  Checkout {https://go.dev/tour/list}[A tour of Go]

** Hello world
   Similar to C language, a Go program requires an entry point function named `main`.
   @code go
   import "fmt"

   func main() {
     fmt.Println("Hello World!");
   }
   @end

* Tooling
** Packages
   - All code in go is organized in .go source files that can be grouped into packages. This is specified at the top of the source files e.g.
   @code go
   package main
   @end
   This indicates that this source file belongs to a package named 'main'.

   - A package can be imported with `import` statement.
   @code go
   import "fmt"
   @end
*** Exported Names
   - The name of all exported symbols in a package start with a *capital Letter* e.g. fmt.Printf

** Modules
   - The go packages are organized in modules.
   - The modules help manage dependencies and specify a global address to the module.
   @code bash
   go mod init github.com/user/repo/path/modname
   @end
   This command initializes a module by specifying the global address to the repository where the module source code will be hosted. The command generates a `go.mod` file in the current directory with module specification e.g.
   @code text
   module github.com/user/repo/path/modname

   go 1.21.4
   @end

* Syntax

** Comments
   You do comments with `//` at the beginning of a line. Multi-line comments are started with `/*` and ended with `*/`.

** Variables
   - Go is a statically typed language.
   - Variables can be declared with `var` keyword.
   - By convention variable names are `camelCase`.

   @code go
   var variableName = "value"
   @end

   - The type is optional and it is inferred from the value at *compile time* if an initial value is provided.
   - A shorthand for declaring a variable is `:=`, it cannot be used outside functions.

   @code go
   variableName := "value"
   a, b, d, _, s := 0, 1, 2.4, false, "Hello!"
   @end

   - Type *must* be specified if variable is declared without an initial value.
   - Unlike most other programming languages, variable type is specified after the variable name.

   @code go
   var countItems int
   @end

*** Combined variable declaration
    - You can declare multiple variables in one line, type specification at the end applies to all preceding variables.

   @code go
   var a, b, c int
    @end

   Uninitialized variables are assigned zero automatically.

   *Convention*: Use the shorthand (:=) variable declaration and assignment, the only exception is when no explicit value other than zero can be used to initialize the variable.

** Constants
   Similar to most other programming languages constants are declared with `const` keyword.
   @code go
   const pi = 3.14
   @end

** Pointers
   - Similar to C/C++, you can declare pointers with `*` operator.
   - Use address operator `&` to get the address of a variable.
   @code go
   variableName := "value"
   var pointerToVariable *string = &variableName

   fmt.Printf("value '%v' of type %T at address %v\n",
     *pointerToVariable, *pointerToVariable, &variableName)
   @end
   - Unlike C/C++, pointer arithmetic is not allowed.

** Printing
   Print functions are part of the Go core package `fmt`. A package must be imported before any functions from it can be used. The print functions are similar to other programming languages, here are few examples:
   @code go
   import "fmt"

   func main() {
     x := 3
     y := 5
     // spaces are automatically added to parameters
     fmt.Println("The sum of", x, "and", y, "is", x+y);
     // Same output with a formatted print function
     fmt.Printf("The sum of %v and %v is %v\n", x, y, x+y);
     // Print the type of a variable
     fmt.Printf("The type of variable x is %T\n", x);
     // Raw string literals
     fmt.Println(`This is \n raw string without
       and is printed as it is`);
   }
   @end

* Primitive Types

** Boolean:
   @code text
   bool
   @end
** Numeric:
   @code text
   uint8       unsigned  8-bit integers (0 to 255)
   uint16      unsigned 16-bit integers (0 to 65535)
   uint32      unsigned 32-bit integers (0 to 4294967295)
   uint64      unsigned 64-bit integers (0 to 18446744073709551615)

   int8        signed  8-bit integers (-128 to 127)
   int16       signed 16-bit integers (-32768 to 32767)
   int32       signed 32-bit integers (-2147483648 to 2147483647)
   int64       signed 64-bit integers (-9223372036854775808 to 9223372036854775807)

   float32     IEEE-754 32-bit floating-point numbers
   float64     IEEE-754 64-bit floating-point numbers

   complex64   complex numbers with float32 real and imaginary parts
   complex128  complex numbers with float64 real and imaginary parts

   byte        alias for uint8
   rune        alias for int32, used to represent  a single unicode
   @end
   > "Explicit conversions are required when different numeric types are mixed in an expression or assignment. For instance, int32 and int are not the same type even though they may have the same size on a particular architecture."

   Source: {https://go.dev/ref/spec#Numeric_types}[Go Reference: Numeric types]

   The `int`, `uint`, and `uintptr` types are usually 32 bits wide on 32 bit systems and 64 bits wide on 64 bit systems.

   *Convention*: Use `int` type unless there are specific reasons to use a signed or unsigned integer type.

** Strings:
   @code text
   string
   @end
* Aggregate Types
** Arrays (Fixed length)
*** Syntax
    @code text
    ArrayType   = "[" ArrayLength "]" ElementType
    ArrayLength = Expression
    ElementType = Type
    @end
*** Examples
    @code text
    [32]byte
    [2*N] struct { x, y int32 }
    [1000]*float64
    [3][5]int
    [2][2][2]float64  // same as [2]([2]([2]float64))
    @end

** Slices (Dynamic length)
*** Syntax
    @code text
    // Declaration
    SliceType = "[" "]" ElementType

    // Allocation
    make([]T, length, capacity)
    new([capacity]T)[0:length]
    @end
*** Examples
   @code text
    someSlice = []int

    someSlice = make([]int, 50, 100)

    // OR less commonly
    someSlice = new([100]int)[0:50]
    @end

** Functions

*** Parameters
    - Similar to {*** combined variable declaration}, parameter types can be combined *if the parameters share the same type*, in such a case, the type of the last parameter applies to parameters before it. Compare the two equivalent examples below.

   @code go
   // `int` type applies to both parameters
   func add(a, b int) int {
     reutrn a + b
   }
   // Same as above
   func add(a int, b int) int {
     reutrn a + b
   }

   @end

*** Return values
   - Functions can return multiple values:

   @code go
   func swap(x, y int) (int, int) {
     return y, x
   }
   @end

**** Named Returns

    @code go
    func split(sum int) (x, y int) {
      x = sum * 4 / 9
      y = sum - x
      return
    }
    @end



* Useful things
** Local documentation
   You can access documentation with `go doc` in the terminal.
   @code bash
   go doc fmt  # Display documentation of the 'fmt' package
   @end
   You can view the documentation of your current package with `go doc` in the package root directory.

** Random number
   The `math/rand` package can be used to generate random numbers.
   For example you can generate a random number between 1 and 100:
   @code go
   package main

   import (
     "fmt"
     "math/rand"
   )

   func main() {
     fmt.Println("Random number (0 - 100): ", rand.Intn(100))
   }
   @end
